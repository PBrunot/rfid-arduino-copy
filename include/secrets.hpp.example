#ifndef SECRETS_H_
#define SECRETS_H_

#include <cstdint>
#include <array>
#include <string_view>
#include "MachineConfig.hpp"
#include "Machine.hpp"
#include "conf.hpp"
#include "FabUser.hpp"

namespace fablabbg::secrets::cards
{
  using WhiteListEntry = std::tuple<card::uid_t, FabUser::UserLevel, std::string_view>;
  using WhiteList = std::array<WhiteListEntry, conf::whitelist::LEN>;

  static constexpr WhiteList whitelist /* List of RFID tags whitelisted, regardless of connection */
      {
          std::make_tuple(0xAABBCCD1, FabUser::UserLevel::FABLAB_ADMIN, "ABCDEFG"),
          std::make_tuple(0xAABBCCD2, FabUser::UserLevel::FABLAB_ADMIN, "PIPPO"),
          std::make_tuple(0xAABBCCD3, FabUser::UserLevel::FABLAB_USER, "USER1"),
          std::make_tuple(0xAABBCCD4, FabUser::UserLevel::FABLAB_USER, "USER2"),
          std::make_tuple(0xAABBCCD5, FabUser::UserLevel::FABLAB_USER, "USER3"),
          std::make_tuple(0xAABBCCD6, FabUser::UserLevel::FABLAB_USER, "USER1"),
          std::make_tuple(0xAABBCCD7, FabUser::UserLevel::FABLAB_USER, "USER1"),
          std::make_tuple(0xAABBCCD8, FabUser::UserLevel::FABLAB_USER, "USER1"),
          std::make_tuple(0xAABBCCD9, FabUser::UserLevel::FABLAB_USER, "USER1"),
          std::make_tuple(0xAABBCCDA, FabUser::UserLevel::FABLAB_USER, "USER1")};
} // namespace fablabbg::secrets::cards

namespace fablabbg::secrets::machine
{
  // Machine connected to the ESP32
  static constexpr std::string_view machine_name = "MACHINE1";
  static constexpr MachineType machine_type = MachineType::LASER;
  static constexpr std::string_view machine_topic = "shelly/command/switch:0";
  static constexpr MachineID machine_id{1}; /* ID of the machine. Will be used to compose MQTT topic*/

} // namespace fablabbg::secrets::machine

namespace fablabbg::secrets::wifi
{
  static constexpr std::string_view ssid = "aa";                /* Change with WIFI SSID name */
  static constexpr std::string_view password = "bb"; /* Change with WIFI SSID password */
} // namespace fablabbg::secrets::wifi

namespace fablabbg::secrets::mqtt
{
  static constexpr std::string_view client = "BOARD";       /* Name of with MQTT client */
  static constexpr std::string_view user = "user";            /* Change with MQTT user */
  static constexpr std::string_view password = "password";     /* Change with MQTT password */
  static constexpr std::string_view server = "192.168.1.1";  /* IP of MQTT broker*/
  static constexpr std::string_view topic = "/machine";        /* Initial part of the topic, machine ID will be added */
  static constexpr std::string_view response_topic = "/reply"; /* Server reply (sub-topic of the full machine topic) */
} // namespace fablabbg::secrets::mqtt

#endif // SECRETS_H_
#ifndef SECRETS_H_
#define SECRETS_H_

#include <cstdint>
#include <array>
#include <string_view>
#include "MachineConfig.hpp"
#include "Machine.hpp"
#include "conf.hpp"
#include "FabUser.hpp"

namespace fablabbg::secrets::cards
{
  using WhiteListEntry = std::tuple<card::uid_t, FabUser::UserLevel, std::string_view>;
  using WhiteList = std::array<WhiteListEntry, conf::whitelist::LEN>;

  static constexpr WhiteList whitelist /* List of RFID tags whitelisted, regardless of connection */
      {
          std::make_tuple(0xAABBCCD1, FabUser::UserLevel::FABLAB_ADMIN, "ABCDEFG"),
          std::make_tuple(0xAABBCCD2, FabUser::UserLevel::FABLAB_ADMIN, "PIPPO"),
          std::make_tuple(0xAABBCCD3, FabUser::UserLevel::FABLAB_USER, "USER1"),
          std::make_tuple(0xAABBCCD4, FabUser::UserLevel::FABLAB_USER, "USER2"),
          std::make_tuple(0xAABBCCD5, FabUser::UserLevel::FABLAB_USER, "USER3"),
          std::make_tuple(0xAABBCCD6, FabUser::UserLevel::FABLAB_USER, "USER1"),
          std::make_tuple(0xAABBCCD7, FabUser::UserLevel::FABLAB_USER, "USER1"),
          std::make_tuple(0xAABBCCD8, FabUser::UserLevel::FABLAB_USER, "USER1"),
          std::make_tuple(0xAABBCCD9, FabUser::UserLevel::FABLAB_USER, "USER1"),
          std::make_tuple(0xAABBCCDA, FabUser::UserLevel::FABLAB_USER, "USER1")};
} // namespace fablabbg::secrets::cards

#endif // SECRETS_H_
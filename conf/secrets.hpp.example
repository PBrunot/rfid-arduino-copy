#ifndef SECRETS_H_
#define SECRETS_H_

#include <cstdint>
#include <array>
#include <string_view>
#include "MachineConfig.hpp"
#include "Machine.hpp"
#include "conf.hpp"
#include "FabUser.hpp"

namespace fablabbg::secrets::cards
{
  static constexpr uint8_t LEN = 10U; /* Number of whitelisted cards */

  using WhiteListEntry = std::tuple<card::uid_t, FabUser::UserLevel, std::string_view>;
  using WhiteList = std::array<WhiteListEntry, LEN>;

  static constexpr WhiteList whitelist /* List of RFID tags whitelisted, regardless of connection */
      {
          std::make_tuple(0xAABBCCD1, FabUser::UserLevel::FabAdmin, "ABCDEFG"),
          std::make_tuple(0xAABBCCD2, FabUser::UserLevel::FabAdmin, "PIPPO"),
          std::make_tuple(0xAABBCCD3, FabUser::UserLevel::NormalUser, "USER1"),
          std::make_tuple(0xAABBCCD4, FabUser::UserLevel::NormalUser, "USER2"),
          std::make_tuple(0xAABBCCD5, FabUser::UserLevel::NormalUser, "USER3"),
          std::make_tuple(0xAABBCCD6, FabUser::UserLevel::NormalUser, "USER4"),
          std::make_tuple(0xAABBCCD7, FabUser::UserLevel::NormalUser, "USER5"),
          std::make_tuple(0xAABBCCD8, FabUser::UserLevel::NormalUser, "USER6"),
          std::make_tuple(0xAABBCCD9, FabUser::UserLevel::FabStaff, "USER7"),
          std::make_tuple(0xAABBCCDA, FabUser::UserLevel::FabStaff, "USER8")};
} // namespace fablabbg::secrets::cards

namespace fablabbg::secrets::credentials
{

#if (WOKWI_SIMULATION)
  static constexpr std::string_view ssid = "Wokwi-GUEST"; /* WOKWI SSID */
  static constexpr std::string_view password = "";        /* WOKWI password */
#else
  static constexpr std::string_view ssid = "MYSSID";      /* Default SSID */
  static constexpr std::string_view password = "MYPWD";   /* Default password */
#endif

  static constexpr std::string_view mqtt_user = "user";
  static constexpr std::string_view mqtt_password = "password";
} // namespace fablabbg::secrets::credentials

#endif // SECRETS_H_